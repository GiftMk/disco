type GenericError {
	message: String!
}

type UploadDetailsPayload {
	audioUploadUrl: String!
	audioFilename: String!
	imageUploadUrl: String!
	imageFilename: String!
}

type UploadDetailsError {
	message: String!
}

union UploadDetailsResponse = UploadDetailsPayload | GenericError | UploadDetailsError

input UploadDetailsInput {
	audioExtension: String!
	imageExtension: String!
}

type Query {
	ping: String!
	uploadDetails(input: UploadDetailsInput!): UploadDetailsResponse!
}

input NormaliseAudioSettings {
	integrated: Float!
	truePeak: Float!
	loudnessRange: Float!
}

input NormaliseAudioInput {
	audioFilename: String!
	settings: NormaliseAudioSettings
}

type NormaliseAudioPayload {
	outputFilename: String!
}

type NormaliseAudioError {
	message: String!
}

union NormaliseAudioResponse = NormaliseAudioPayload | GenericError | NormaliseAudioError

input CreateVideoInput {
	audioFilename: String!
	imageFilename: String!
	enableAudioNormalisation: Boolean
	normaliseAudioSettings: NormaliseAudioSettings
}

type CreateVideoPayload {
	trackingId: ID!
}

type ResizeImageError {
	message: String!
}

type CreateVideoError {
	message: String!
}

union CreateVideoResponse = CreateVideoPayload | GenericError

type Mutation {
	normaliseAudio(input: NormaliseAudioInput!): NormaliseAudioResponse!
	createVideo(input: CreateVideoInput!): CreateVideoResponse!
}

type CreatingVideoPayload {
	percentageComplete: Float!
	outputFilename: String
}

type CreatingVideoError {
	message: String!
}

union CreatingVideoResponse = CreatingVideoPayload | GenericError | CreateVideoError | NormaliseAudioError | ResizeImageError

type Subscription {
	creatingVideo(trackingId: ID!): CreatingVideoResponse!
}
