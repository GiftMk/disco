type Error {
	message: String!
}

type UploadDetailsPayload {
	audioUploadUrl: String!
	audioFilename: String!
	imageUploadUrl: String!
	imageFilename: String!
}

union UploadDetailsResponse = UploadDetailsPayload | Error

input UploadDetailsInput {
	audioExtension: String!
	imageExtension: String!
}

type Query {
	ping: String!
	uploadDetails(input: UploadDetailsInput!): UploadDetailsResponse!
}

input NormaliseAudioSettings {
	integrated: Float!
	truePeak: Float!
	loudnessRange: Float!
}

input CreateVideoInput {
	audioFilename: String!
	imageFilename: String!
	enableAudioNormalisation: Boolean
	normaliseAudioSettings: NormaliseAudioSettings
}

type CreateVideoPayload {
	trackingId: ID!
}

union CreateVideoResponse = CreateVideoPayload | Error

type Mutation {
	createVideo(input: CreateVideoInput!): CreateVideoResponse!
}

enum CreatingVideoStep {
	DOWNLOADING_ASSETS,
	PROCESSING_ASSETS,
	CREATING_VIDEO,
	UPLOADING_VIDEO,
	FINISHED
}

type CreatingVideoPayload {
	percentageComplete: Float
	currentStep: CreatingVideoStep!
	outputFilename: String
}

union CreatingVideoResponse = CreatingVideoPayload | Error

type Subscription {
	creatingVideo(trackingId: ID!): CreatingVideoResponse!
}
